<launch>
  <!-- params for long term system -->
  <rosparam ns="client_params">
      robot_type: 'fetch'
      vel_topic: '/cmd_vel'
  </rosparam>

  <rosparam ns="client_capability">
      navigation:
          type: differential
          topic: '/cmd_vel'
      sensors:
          camera:
              depth: true
              topic: '/head_camera'
          lidar:
              height: 150  # mm
              fov: 0.349   # radians
              topic: '/base_scan'
  </rosparam>

  <!-- startup rosduct config -->
  <node pkg="rosduct" name="rosduct" type="rosduct_main.py" output="screen" respawn="true">
    <rosparam>
    # ROSbridge websocket server info
    rosbridge_ip: olorin.engr.oregonstate.edu
    rosbridge_port: 9090
    # Topics being published remotely to expose locally
    remote_topics: [
                        ['/fetch_agent/active/goal', 'long_term_deployment/TaskActionGoal', '/robot_client/active/goal'],
                        ['/fetch_agent/active/cancel', 'actionlib_msgs/GoalID', '/robot_client/active/cancel'],
                        ['/fetch_agent/continuous/goal', 'long_term_deployment/TaskActionGoal', '/robot_client/continuous/goal'],
                        ['/fetch_agent/continuous/cancel', 'actionlib_msgs/GoalID', '/robot_client/continuous/cancel']
                   ]
    # Topics being published in the local roscore to expose remotely
    local_topics: [
                        ['/robot_client/active/result', 'long_term_deployment/TaskActionResult', '/fetch_agent/active/result'],
                        ['/robot_client/active/feedback', 'long_term_deployment/TaskActionFeedback', '/fetch_agent/active/feedback'],
                        ['/robot_client/active/status', 'actionlib_msgs/GoalStatusArray', '/fetch_agent/active/status'],
                        ['/robot_client/continuous/result', 'long_term_deployment/TaskActionResult', '/fetch_agent/continuous/result'],
                        ['/robot_client/continuous/feedback', 'long_term_deployment/TaskActionFeedback', '/fetch_agent/continuous/feedback'],
                        ['/robot_client/continuous/status', 'actionlib_msgs/GoalStatusArray', '/fetch_agent/continuous/status']
                  ]
    # Services running remotely to expose locally
    remote_services: [
                        ['/task_server/register_agent', 'long_term_deployment/RegisterAgent'],
                        ['/task_server/unregister_agent', 'long_term_deployment/UnregisterAgent'],
                        ['/task_server/get_agents', 'long_term_deployment/GetRegisteredAgents']
                     ]
    # Services running locally to expose remotely
    local_services: [
                        ['/robot_client/active/get_goal_from_id', 'long_term_deployment/GetTaskFromID', '/fetch_agent/active/get_goal_from_id'],
                        ['/robot_client/continuous/get_goal_from_id', 'long_term_deployment/GetTaskFromID', '/fetch_agent/continuous/get_goal_from_id']
                    ]
    # Parameters to be sync, they will be polled to stay in sync
    #parameters: []
    #parameter_polling_hz: 1

    </rosparam>
  </node>

  <!-- task management client node -->
  <node pkg="long_term_deployment" name="robot_client" type="client.py" output="screen">
      <param name="agent_name" value="fetch"/>
  </node>
</launch>
